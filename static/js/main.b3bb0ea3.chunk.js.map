{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardArray.js","Components/Scroll.js","Components/SerchBox.js","Components/ErrorBoundery.js","Constants.js","Components/Header.js","Containers/App.js","Actions.js","Reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","id","name","email","className","src","alt","CardList","Info","map","content","index","key","Math","random","Scroll","props","children","SerchBox","result","type","onChange","placeholder","ErrorBoundry","hasError","this","setState","React","Component","SEARCH_FILED_CHANGE","FETCH_ROBOTS_PENDING","FETCH_ROBOTS_FULLFILLED","FETCH_ROBOTS_ERROR","Header","nextProps","nextState","App","onRobots","onSerchChange","search","robots","filterRobots","filter","toLowerCase","includes","length","connect","handleSearch","robotReducer","pending","dispatch","event","UserInput","target","value","payload","fetch","response","json","data","Err","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","createLogger","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b3bb0ea3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Card.css'\r\nconst Card=({id,name, email})=>\r\n{ //const {n, e}=props;\r\n\r\n   \r\n    console.log('Card')\r\n  return(\r\n\r\n       <div id=\"fa\">\r\n       <div id='ch'>\r\n       <img className=\"card\" src={`https://robohash.org/${id}?200x200`} alt=\"Robots\" />\r\n       <p>{name}</p>\r\n       <p>{email}</p>\r\n       </div>\r\n      </div>\r\n  \t);\r\n}\r\n\r\nexport default Card;\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nlet CardList=({Info})=>\r\n{      \r\n\r\n\r\n     return(\r\n\r\n     \t<div>\r\n       { \r\n        Info.map((content,index )=>\r\n           {\r\n             //when iterating over array keys must be defined for each array and must be unique\r\n          return <Card  key={Math.random()}  id={content.id} name={content.name}      email={content.email}  />\r\n\r\n            })\r\n           }\r\n            </div>\r\n    );\r\n     \r\n}\r\n\r\nexport default CardList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './Scroll.css';\r\n// class Scroll extends React.Component\r\n// {\r\n//    render()\r\n//    {\r\n//      return    this.props.children;\r\n//    }\r\n// }\r\n\r\nconst Scroll=(props)=>\r\n{   \r\n\treturn(\r\n\t\t<div className=\"Chil\">\r\n\t{props.children}\r\n\t </div>\r\n);\r\n}\r\nexport default Scroll; \r\n\r\n\r\n","import React from 'react';\r\nimport  './SearchBox.css';\r\nconst SerchBox=({result})=>\r\n{   \r\n\treturn(\r\n\r\n            <div >\r\n            <input  className=\"search\"    type=\"text\" name=\"serchbox\"  onChange={result} placeholder=\"SERCH ROBOTS\"/>\r\n            </div>\r\n\r\n\r\n      );\r\n\r\n\r\n}\r\nexport default SerchBox;\r\n\r\n\r\n\r\n\r\n\r\n","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends React.Component\r\n{\r\n  constructor(props)\r\n    {\r\n\tsuper(props);\r\n        this.state={\r\n        \thasError:false\r\n        }\r\n     }\r\ncomponentDidCatch(error, Info) {\r\n      this.setState({hasError:true})\r\n  }\r\n    \r\n\r\nrender()\r\n{\r\n\tif(this.state.hasError)\r\n\t{\r\n    return(\r\n    <h1>Sorr Something Went wrong</h1>\r\n    \t)\r\n\r\n    }else {\r\n    \treturn(\r\n          this.props.children\r\n    \t\t)\r\n    \t\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundry;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const SEARCH_FILED_CHANGE='SEARCH_FILED_CHANGE';\r\n\r\nexport const FETCH_ROBOTS_PENDING='FETCH_ROBOTS_PENDING';\r\n\r\nexport const FETCH_ROBOTS_FULLFILLED='FETCH_ROBOTS_FULLFILLED';\r\n\r\nexport const FETCH_ROBOTS_ERROR='FETCH_ROBOTS_ERROR';","import React from 'react';\r\n\r\n\r\nclass  Header extends React.Component\r\n{\r\n\r\nshouldComponentUpdate(nextProps, nextState)\r\n{ \r\n // if(this.)\r\n   return false;\r\n  \r\n}\r\n\r\n render()\r\n {\r\n    console.log('Header')\r\n \treturn <h1 className=\"head\">ROBOFRIENDS</h1>\r\n }\r\n\r\n\r\n\r\n}\r\nexport default Header;","import React,{Component} from 'react';\r\n//import {Data} from './ENames';\r\nimport CardList from '../Components/CardArray';\r\nimport Scroll from '../Components/Scroll';\r\nimport SerchBox from '../Components/SerchBox';\r\nimport ErrorBoundry from '../Components/ErrorBoundery';\r\nimport 'tachyons';\r\nimport './App.css';\r\nimport {connect} from 'react-redux';\r\nimport {ChangeSearch,fetchRobots} from '../Actions.js';\r\nimport Thoba from '../Components/Header';\r\n// import {handleSearch,robotsReducer}  from '../Reducers.js';\r\n\r\n\r\n\r\nconst mapStateToProps=state=>{\r\nreturn{\r\n    search:state.handleSearch.search,\r\n    robots:state.robotReducer.robots,\r\n    pending:state.robotReducer.pending\r\n}\r\n}\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n return {\r\n  \r\n  onSerchChange:(event)=>dispatch(ChangeSearch(event.target.value)),\r\n  onRobots:()=>dispatch(fetchRobots())\r\n\r\n }\r\n\r\n\r\n\r\n}\r\n\r\nclass App extends Component\r\n{\r\n\r\n  // constructor()\r\n  // {\r\n  //    super();\r\n  //     this.state=\r\n  //     {   \r\n  //     \t  robots:[],\r\n  //        // search:\"\"\r\n  //     }\r\n  // }\r\n   // onSerchChange=(event)=>\r\n    // {\r\n    // \tthis.setState({search:event.target.value});\r\n    \r\n    // \t//WHy parenthesis ?????\r\n    // }\r\n    componentDidMount()\r\n    {\r\n       // console.log(this.props.store.getState());\r\n\r\n\r\n         // fetch('https://jsonplaceholder.typicode.com/users')\r\n         //   .then(response => response.json())\r\n         //     .then(json => console.log(json))\r\n           // fetch('https://jsonplaceholder.typicode.com/users')\r\n           // .then(response=>response.json())\r\n           // .then(users=>this.setState({robots:users}));\r\n\r\n             this.props.onRobots();\r\n\r\n        \r\n\r\n    }\r\n   render()\r\n   {\r\n      const {onSerchChange,search,robots}=this.props;\r\n      \r\n        const filterRobots=robots.filter((content)=>\r\n        {\r\n           return content.name.toLowerCase().includes(search.toLowerCase());\r\n        })\r\n          if(!(robots.length))\r\n          {\r\n           return <h1>LOADING</h1>\r\n          }\r\n          else\r\n          {\r\n      return(\r\n         <div className='tc '>\r\n           <Thoba/>\r\n           <SerchBox    className=\" pa6\"  /*result={this.onSerchChange}*/ result={onSerchChange}   />\r\n           <Scroll>\r\n           <ErrorBoundry>\r\n           <CardList   Info={filterRobots}  />\r\n           </ErrorBoundry>\r\n           </Scroll>\r\n         </div>\r\n    );\r\n    }\r\n   }\r\n}\r\n\r\n\r\nexport default  connect(mapStateToProps,mapDispatchToProps)(App);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport {\r\n\tSEARCH_FILED_CHANGE,\r\n\tFETCH_ROBOTS_PENDING,\r\n\tFETCH_ROBOTS_FULLFILLED,\r\n\tFETCH_ROBOTS_ERROR\r\n} from './Constants.js';\r\n\r\nexport const ChangeSearch=(UserInput)=>({\r\n  type:SEARCH_FILED_CHANGE,\r\n  payload:UserInput\r\n})\r\n\r\nexport const fetchRobots=()=>(dispatch)=>{\r\n\tdispatch({type:FETCH_ROBOTS_PENDING})\r\n     fetch('https://jsonplaceholder.typicode.com/users')\r\n           .then(response=>response.json())\r\n           .then(data=>dispatch({type:FETCH_ROBOTS_FULLFILLED,payload:data}))\r\n           .catch(Err=>dispatch({type:FETCH_ROBOTS_ERROR,payload:Err}))\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport {\r\n\tSEARCH_FILED_CHANGE,\r\n\tFETCH_ROBOTS_PENDING,\r\n\tFETCH_ROBOTS_FULLFILLED,\r\n\tFETCH_ROBOTS_ERROR\r\n} from './Constants.js';\r\n\r\n\r\nconst initialStateSearch={\r\n\t search:''\r\n}\r\n\r\n\r\nexport  const handleSearch=(state=initialStateSearch,action={})=>{\r\n\r\n     switch (action.type) {\r\n     \tcase SEARCH_FILED_CHANGE:\r\n     \t\treturn {...state,search:action.payload}//alternative Object.assign({},state,{search:action.payload})\r\n     \tdefault:\r\n     \treturn state;\r\n     \t    \r\n     }\r\n\r\n}\r\n\r\n\r\n\r\nconst initialStateRobots={\r\n\r\n robots:[],\r\n pending:true\r\n\r\n}\r\n\r\nexport const robotReducer=(state=initialStateRobots,action={})=>{\r\n\r\n          \r\n    switch (action.type) {\r\n    \tcase FETCH_ROBOTS_PENDING:\r\n    \treturn state;\r\n    \tcase FETCH_ROBOTS_FULLFILLED:\r\n    \treturn {...state,robots:action.payload,pending:false}\r\n        case FETCH_ROBOTS_ERROR:\r\n        return {...state,pending:false}\r\n    \tdefault:\r\n    \treturn state;\r\n    \t\t\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n//import    Card from   './Card';\r\nimport App from './Containers/App';\r\nimport {handleSearch,robotReducer} from './Reducers.js';\r\n//import    {Data} from './ENames.js';\r\n//import  MyArray from './CardArray';//use first letter capital\r\n\r\nconst rootReducer=combineReducers({handleSearch,robotReducer});\r\n//rootReducer:combine different reducers  into a root reducer\r\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware,createLogger()));\r\n\r\n// ReactDOM.render(<React.StrictMode> <App /></React.StrictMode>, document.getElementById('root'));\r\nReactDOM.render( \r\n\t            <Provider store={store} >\r\n              <App  />   \r\n              </Provider>\r\n\t,document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}