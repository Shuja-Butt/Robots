{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardArray.js","Components/Scroll.js","Components/SerchBox.js","Components/ErrorBoundery.js","Constants.js","Components/Header.js","Containers/App.js","Actions.js","Reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","console","log","className","src","alt","CardList","Info","map","content","index","key","Math","random","Scroll","props","children","SerchBox","result","type","onChange","placeholder","ErrorBoundry","state","hasError","error","this","setState","React","Component","SEARCH_FILED_CHANGE","FETCH_ROBOTS_PENDING","FETCH_ROBOTS_FULLFILLED","FETCH_ROBOTS_ERROR","Header","nextProps","nextState","App","onRobots","onSerchChange","search","robots","filterRobots","filter","toLowerCase","includes","length","connect","handleSearch","robotReducer","pending","dispatch","event","UserInput","target","value","payload","fetch","then","response","json","data","catch","Err","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","createLogger","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.39d1952c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport './Card.css'\r\nconst Card=({id,name, email})=>\r\n{ //const {n, e}=props;\r\n\r\n   \r\n    console.log('Card')\r\n  return(\r\n\r\n       <div id=\"fa\">\r\n       <div id='ch'>\r\n       <img className=\"card\" src={`https:robohash.org/${id}?200x200`} alt=\"Robots\" />\r\n       <p>{name}</p>\r\n       <p>{email}</p>\r\n       </div>\r\n      </div>\r\n  \t);\r\n}\r\n\r\nexport default Card;\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nlet CardList=({Info})=>\r\n{      \r\n\r\n\r\n     return(\r\n\r\n     \t<div>\r\n       { \r\n        Info.map((content,index )=>\r\n           {\r\n             //when iterating over array keys must be defined for each array and must be unique\r\n          return <Card  key={Math.random()}  id={content.id} name={content.name}      email={content.email}  />\r\n\r\n            })\r\n           }\r\n            </div>\r\n    );\r\n     \r\n}\r\n\r\nexport default CardList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './Scroll.css';\r\n// class Scroll extends React.Component\r\n// {\r\n//    render()\r\n//    {\r\n//      return    this.props.children;\r\n//    }\r\n// }\r\n\r\nconst Scroll=(props)=>\r\n{   \r\n\treturn(\r\n\t\t<div className=\"Chil\">\r\n\t{props.children}\r\n\t </div>\r\n);\r\n}\r\nexport default Scroll; \r\n\r\n\r\n","import React from 'react';\r\nimport  './SearchBox.css';\r\nconst SerchBox=({result})=>\r\n{   \r\n\treturn(\r\n\r\n            <div >\r\n            <input  className=\"search\"    type=\"text\" name=\"serchbox\"  onChange={result} placeholder=\"SERCH ROBOTS\"/>\r\n            </div>\r\n\r\n\r\n      );\r\n\r\n\r\n}\r\nexport default SerchBox;\r\n\r\n\r\n\r\n\r\n\r\n","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundry extends React.Component\r\n{\r\n  constructor(props)\r\n    {\r\n\tsuper(props);\r\n        this.state={\r\n        \thasError:false\r\n        }\r\n     }\r\ncomponentDidCatch(error, Info) {\r\n      this.setState({hasError:true})\r\n  }\r\n    \r\n\r\nrender()\r\n{\r\n\tif(this.state.hasError)\r\n\t{\r\n    return(\r\n    <h1>Sorr Something Went wrong</h1>\r\n    \t)\r\n\r\n    }else {\r\n    \treturn(\r\n          this.props.children\r\n    \t\t)\r\n    \t\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nexport default ErrorBoundry;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","export const SEARCH_FILED_CHANGE='SEARCH_FILED_CHANGE';\r\n\r\nexport const FETCH_ROBOTS_PENDING='FETCH_ROBOTS_PENDING';\r\n\r\nexport const FETCH_ROBOTS_FULLFILLED='FETCH_ROBOTS_FULLFILLED';\r\n\r\nexport const FETCH_ROBOTS_ERROR='FETCH_ROBOTS_ERROR';","import React from 'react';\r\n\r\n\r\nclass  Header extends React.Component\r\n{\r\n\r\nshouldComponentUpdate(nextProps, nextState)\r\n{ \r\n // if(this.)\r\n   return false;\r\n  \r\n}\r\n\r\n render()\r\n {\r\n    console.log('Header')\r\n \treturn <h1 className=\"head\">ROBOFRIENDS</h1>\r\n }\r\n\r\n\r\n\r\n}\r\nexport default Header;","import React,{Component} from 'react';\r\n//import {Data} from './ENames';\r\nimport CardList from '../Components/CardArray';\r\nimport Scroll from '../Components/Scroll';\r\nimport SerchBox from '../Components/SerchBox';\r\nimport ErrorBoundry from '../Components/ErrorBoundery';\r\nimport 'tachyons';\r\nimport './App.css';\r\nimport {connect} from 'react-redux';\r\nimport {ChangeSearch,fetchRobots} from '../Actions.js';\r\nimport Thoba from '../Components/Header';\r\n// import {handleSearch,robotsReducer}  from '../Reducers.js';\r\n\r\n\r\n\r\nconst mapStateToProps=state=>{\r\nreturn{\r\n    search:state.handleSearch.search,\r\n    robots:state.robotReducer.robots,\r\n    pending:state.robotReducer.pending\r\n}\r\n}\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n return {\r\n  \r\n  onSerchChange:(event)=>dispatch(ChangeSearch(event.target.value)),\r\n  onRobots:()=>dispatch(fetchRobots())\r\n\r\n }\r\n\r\n\r\n\r\n}\r\n\r\nclass App extends Component\r\n{\r\n\r\n  // constructor()\r\n  // {\r\n  //    super();\r\n  //     this.state=\r\n  //     {   \r\n  //     \t  robots:[],\r\n  //        // search:\"\"\r\n  //     }\r\n  // }\r\n   // onSerchChange=(event)=>\r\n    // {\r\n    // \tthis.setState({search:event.target.value});\r\n    \r\n    // \t//WHy parenthesis ?????\r\n    // }\r\n    componentDidMount()\r\n    {\r\n       // console.log(this.props.store.getState());\r\n\r\n\r\n         // fetch('https://jsonplaceholder.typicode.com/users')\r\n         //   .then(response => response.json())\r\n         //     .then(json => console.log(json))\r\n           // fetch('https://jsonplaceholder.typicode.com/users')\r\n           // .then(response=>response.json())\r\n           // .then(users=>this.setState({robots:users}));\r\n\r\n             this.props.onRobots();\r\n\r\n        \r\n\r\n    }\r\n   render()\r\n   {\r\n      const {onSerchChange,search,robots}=this.props;\r\n      \r\n        const filterRobots=robots.filter((content)=>\r\n        {\r\n           return content.name.toLowerCase().includes(search.toLowerCase());\r\n        })\r\n          if(!(robots.length))\r\n          {\r\n           return <h1>LOADING</h1>\r\n          }\r\n          else\r\n          {\r\n      return(\r\n         <div className='tc '>\r\n           <Thoba/>\r\n           <SerchBox    className=\" pa6\"  /*result={this.onSerchChange}*/ result={onSerchChange}   />\r\n           <Scroll>\r\n           <ErrorBoundry>\r\n           <CardList   Info={filterRobots}  />\r\n           </ErrorBoundry>\r\n           </Scroll>\r\n         </div>\r\n    );\r\n    }\r\n   }\r\n}\r\n\r\n\r\nexport default  connect(mapStateToProps,mapDispatchToProps)(App);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport {\r\n\tSEARCH_FILED_CHANGE,\r\n\tFETCH_ROBOTS_PENDING,\r\n\tFETCH_ROBOTS_FULLFILLED,\r\n\tFETCH_ROBOTS_ERROR\r\n} from './Constants.js';\r\n\r\nexport const ChangeSearch=(UserInput)=>({\r\n  type:SEARCH_FILED_CHANGE,\r\n  payload:UserInput\r\n})\r\n\r\nexport const fetchRobots=()=>(dispatch)=>{\r\n\tdispatch({type:FETCH_ROBOTS_PENDING})\r\n     fetch('https://jsonplaceholder.typicode.com/users')\r\n           .then(response=>response.json())\r\n           .then(data=>dispatch({type:FETCH_ROBOTS_FULLFILLED,payload:data}))\r\n           .catch(Err=>dispatch({type:FETCH_ROBOTS_ERROR,payload:Err}))\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","\r\nimport {\r\n\tSEARCH_FILED_CHANGE,\r\n\tFETCH_ROBOTS_PENDING,\r\n\tFETCH_ROBOTS_FULLFILLED,\r\n\tFETCH_ROBOTS_ERROR\r\n} from './Constants.js';\r\n\r\n\r\nconst initialStateSearch={\r\n\t search:''\r\n}\r\n\r\n\r\nexport  const handleSearch=(state=initialStateSearch,action={})=>{\r\n\r\n     switch (action.type) {\r\n     \tcase SEARCH_FILED_CHANGE:\r\n     \t\treturn {...state,search:action.payload}//alternative Object.assign({},state,{search:action.payload})\r\n     \tdefault:\r\n     \treturn state;\r\n     \t    \r\n     }\r\n\r\n}\r\n\r\n\r\n\r\nconst initialStateRobots={\r\n\r\n robots:[],\r\n pending:true\r\n\r\n}\r\n\r\nexport const robotReducer=(state=initialStateRobots,action={})=>{\r\n\r\n          \r\n    switch (action.type) {\r\n    \tcase FETCH_ROBOTS_PENDING:\r\n    \treturn state;\r\n    \tcase FETCH_ROBOTS_FULLFILLED:\r\n    \treturn {...state,robots:action.payload,pending:false}\r\n        case FETCH_ROBOTS_ERROR:\r\n        return {...state,pending:false}\r\n    \tdefault:\r\n    \treturn state;\r\n    \t\t\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore,applyMiddleware,combineReducers} from 'redux';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n//import    Card from   './Card';\nimport App from './Containers/App';\nimport {handleSearch,robotReducer} from './Reducers.js';\n//import    {Data} from './ENames.js';\n//import  MyArray from './CardArray';//use first letter capital\n\nconst rootReducer=combineReducers({handleSearch,robotReducer});\n//rootReducer:combine different reducers  into a root reducer\nconst store=createStore(rootReducer,applyMiddleware(thunkMiddleware,createLogger()));\n\n// ReactDOM.render(<React.StrictMode> <App /></React.StrictMode>, document.getElementById('root'));\nReactDOM.render(<React.StrictMode>  \n\t            <Provider store={store} >\n              <App  />   \n              </Provider>\n           \n\t                   { // <Card   name={Data[0].name}   email={Data[0].email}  />\n                     //    <Card  name={Data[1].name}   email={Data[1].email}  />\n                     //    <Card  name={Data[2].name}   email={Data[2].email}  />\n                     //    <Card  name={Data[3].name}   email={Data[3].email}   />\n                 }\n\t</React.StrictMode>,document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}